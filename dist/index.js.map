{"version":3,"sources":["../src/index.ts","../src/lib/httpClient.ts","../src/lib/logger.ts","../src/operations/find.ts","../src/operations/update.ts","../src/operations/create.ts","../src/operations/delete.ts","../src/operations/count.ts","../src/client.ts"],"sourcesContent":["export * from \"./client\";\n","import qs from \"qs\";\n\nimport { logger } from \"./logger\";\n\nconst cache =\n  (process.env.NEXT_PUBLIC_CACHE_CONTROL as RequestCache) || \"force-cache\";\nconst revalidate = Number(process.env.NEXT_PUBLIC_REVALIDATE) || false;\n\ntype HTTPMethods = \"GET\" | \"POST\" | \"PATCH\" | \"DELETE\" | \"PUT\";\n\ntype Headers = Record<string, any>;\ntype NextConfigProps = {\n  revalidate?: number | false;\n  tags?: string[];\n};\ntype RequestProps = {\n  headers?: Headers;\n  query?: any;\n  nextConfig?: NextConfigProps;\n};\n\nexport interface GetOpts extends RequestProps {}\n\ntype BodyProps = {\n  type?: \"POST\" | \"PATCH\" | \"PUT\";\n  body?: any;\n  [x: string]: any;\n};\n\nexport type HttpClient = {\n  request: (\n    endpoint: string,\n    method: HTTPMethods,\n    options?: RequestProps & BodyProps\n  ) => Promise<any>;\n  get: <T>(endpoint: string, props?: GetOpts) => Promise<T>;\n  post: <T>(endpoint: string, props?: BodyProps) => Promise<T>;\n  patch: <T>(endpoint: string, props?: BodyProps) => Promise<T>;\n  put: <T>(endpoint: string, props?: BodyProps) => Promise<T>;\n  delete: <T>(endpoint: string, props?: RequestProps) => Promise<T>;\n};\n\nexport type HttpClientProps = {\n  url: string;\n  log?: boolean;\n  headers?: () => Headers;\n} & HttpClientHelpers;\n\nexport type HttpClientHelpers = {\n  beforeRequest?: (props: { url: string } & RequestInit) => void;\n  afterRequest?: (response: any) => void;\n  parseResponse?: (response: any) => any;\n};\nexport function httpClient(props: HttpClientProps): HttpClient {\n  const buildUrl = (endpoint: string, query?: any): string => {\n    const queryString = qs.stringify(query, { addQueryPrefix: true });\n    return `${props.url}/${endpoint}${queryString}`;\n  };\n\n  const fetchJson = async (\n    url: string,\n    method: HTTPMethods,\n    headers: Headers,\n    next?: NextConfigProps,\n    body?: any\n  ): Promise<any> => {\n    const requestOpts: RequestInit = {\n      method,\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        \"Cache-Control\": cache,\n        ...headers,\n      },\n      body: JSON.stringify(body),\n\n      // @ts-ignore\n      next: {\n        revalidate: revalidate,\n        tags: [\"payload\"],\n        ...next,\n      },\n    };\n\n    try {\n      if (props.beforeRequest) {\n        props.beforeRequest({ url, ...requestOpts });\n      }\n\n      const response = await fetch(url, requestOpts);\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      const data = await response.json();\n\n      if (props.afterRequest) {\n        props.afterRequest(data);\n      }\n\n      return props.parseResponse ? props.parseResponse(data) : data;\n    } catch (error) {\n      logger.error(`Error fetching ${url}`, error);\n      throw error;\n    }\n  };\n\n  const request: HttpClient[\"request\"] = async (\n    endpoint,\n    method,\n    options = {}\n  ) => {\n    const url = buildUrl(endpoint, options.query);\n\n    const headers = options.headers || {};\n    if (props.headers) {\n      Object.assign(headers, props.headers());\n    }\n\n    return fetchJson(url, method, headers, options.nextConfig, options.body);\n  };\n\n  const postRequest: HttpClient[\"post\"] = async (endpoint, props) =>\n    request(endpoint, \"POST\", props);\n  const putRequest: HttpClient[\"put\"] = async (endpoint, props) =>\n    request(endpoint, \"PUT\", props);\n  const patchRequest: HttpClient[\"patch\"] = async (endpoint, props) =>\n    request(endpoint, \"PATCH\", props);\n\n  return {\n    request,\n    get: (endpoint, props) => request(endpoint, \"GET\", props),\n    delete: (endpoint, props) => request(endpoint, \"DELETE\", props),\n    post: postRequest,\n    put: putRequest,\n    patch: patchRequest,\n  };\n}\n","import { pino } from \"pino\";\n\nconst env = process.env.NODE_ENV || \"development\";\n\nexport const createLogger = (props?: { name?: string }) => {\n  if (env === \"production\") {\n    return pino({ name: props?.name });\n  }\n\n  // const pretty = require(\"pino-pretty\");\n  // const stream = pretty({\n  //   colorize: true,\n  // });\n  return pino({ name: props?.name });\n};\n\nexport const logger = createLogger();\n","import { PaginatedDocs } from \"payload/dist/database/types\";\n\nimport { HttpClient } from \"@/lib/httpClient\";\nimport { ByIDOptions, GeneratedTypes, ManyOptions } from \"@/types\";\n\nexport type FindOptions<T extends keyof GeneratedTypes[\"collections\"]> =\n  ManyOptions<T> & {\n    limit?: number;\n    page?: number;\n    pagination?: boolean;\n    sort?: string;\n  };\n\nexport type FindByIdOptions<T extends keyof GeneratedTypes[\"collections\"]> =\n  ByIDOptions<T>;\n\n/**\n * @description Find documents with criteria\n * @param options\n * @returns documents satisfying query\n */\nexport const find = async <T extends keyof GeneratedTypes[\"collections\"]>(\n  client: HttpClient,\n  options: FindOptions<T>\n): Promise<PaginatedDocs<GeneratedTypes[\"collections\"][T]>> => {\n  const { collection, ...rest } = options;\n\n  return client.get(`${collection as string}`, {\n    query: rest,\n    nextConfig: {\n      tags: [\"payload\"],\n    },\n  });\n};\n\nexport const findByID = <T extends keyof GeneratedTypes[\"collections\"]>(\n  client: HttpClient,\n  options: FindByIdOptions<T>\n): Promise<GeneratedTypes[\"collections\"][T]> => {\n  const { collection, id, ...rest } = options;\n  const url = `${collection as string}/${id}`;\n  return client.get(url, {\n    query: rest,\n    nextConfig: {\n      tags: [\"payload\"],\n    },\n  });\n};\n","import { BulkOperationResult } from \"payload/dist/collections/config/types\";\nimport type { DeepPartial } from \"ts-essentials\";\n\nimport { HttpClient } from \"@/lib/httpClient\";\nimport { ByIDOptions, GeneratedTypes, ManyOptions } from \"@/types\";\n\nexport type UpdateByIDOptions<\n  TSlug extends keyof GeneratedTypes[\"collections\"],\n> = ByIDOptions<TSlug> & {\n  data: DeepPartial<GeneratedTypes[\"collections\"][TSlug]>;\n};\n\nexport type UpdateOptions<TSlug extends keyof GeneratedTypes[\"collections\"]> =\n  ManyOptions<TSlug> & {\n    data: DeepPartial<GeneratedTypes[\"collections\"][TSlug]>;\n  };\n\nconst update = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n  client: HttpClient,\n  options: UpdateOptions<TSlug>\n): Promise<BulkOperationResult<TSlug>> => {\n  const { collection, data, ...rest } = options;\n  return client.put(collection as string, {\n    body: data,\n    query: rest,\n  });\n};\n\nconst updateByID = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n  client: HttpClient,\n  options: UpdateByIDOptions<TSlug>\n): Promise<GeneratedTypes[\"collections\"][TSlug]> => {\n  const { collection, id, data, ...rest } = options;\n  return client.put(`${collection as string}/${id}`, {\n    body: data,\n    query: rest,\n  });\n};\n\nexport { update, updateByID };\n","import { HttpClient } from \"@/lib/httpClient\";\nimport { BaseOptions, GeneratedTypes } from \"@/types\";\n\nexport type CreateOptions<TSlug extends keyof GeneratedTypes[\"collections\"]> =\n  BaseOptions<TSlug> & {\n    data: Omit<\n      GeneratedTypes[\"collections\"][TSlug],\n      \"createdAt\" | \"id\" | \"updatedAt\"\n    > & {\n      id?: string | null | undefined;\n      createdAt?: string | null | undefined;\n      updatedAt?: string | null | undefined;\n    };\n  };\n\nexport const create = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n  client: HttpClient,\n  options: CreateOptions<TSlug>\n): Promise<GeneratedTypes[\"collections\"][TSlug]> => {\n  const { collection, data, ...rest } = options;\n  return client.post(`${collection as string}`, {\n    body: data,\n    query: rest,\n  });\n};\n","import { BulkOperationResult } from \"payload/dist/collections/config/types\";\n\nimport { HttpClient } from \"@/lib/httpClient\";\nimport { ByIDOptions, GeneratedTypes, ManyOptions } from \"@/types\";\n\nexport type DeleteByIdOptions<\n  TSlug extends keyof GeneratedTypes[\"collections\"],\n> = ByIDOptions<TSlug>;\n\nexport type DeleteManyOptions<\n  TSlug extends keyof GeneratedTypes[\"collections\"],\n> = ManyOptions<TSlug>;\n\nexport const deleteMany = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n  client: HttpClient,\n  options: DeleteManyOptions<TSlug>\n): Promise<BulkOperationResult<TSlug>> => {\n  const { collection, ...rest } = options;\n  return client.delete(`${collection as string}`, {\n    query: rest,\n  });\n};\n\nexport const deleteByID = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n  client: HttpClient,\n  options: DeleteByIdOptions<TSlug>\n): Promise<GeneratedTypes[\"collections\"][TSlug]> => {\n  const { collection, id, ...rest } = options;\n  return client.delete(`${collection as string}/${id}`, {\n    query: rest,\n  });\n};\n","import { Where } from \"payload/dist/types\";\n\nimport { HttpClient } from \"@/lib/httpClient\";\nimport { BaseOptions, GeneratedTypes } from \"@/types\";\n\nexport type CountOptions<T extends keyof GeneratedTypes[\"collections\"]> =\n  BaseOptions<T> & {\n    where?: Where;\n  };\n\nexport const count = <T extends keyof GeneratedTypes[\"collections\"]>(\n  client: HttpClient,\n  options: CountOptions<T>\n): Promise<{ totalDocs: number }> => {\n  const { collection, ...rest } = options;\n  return client.get(`${collection as string}/count`, {\n    query: rest,\n    nextConfig: {\n      tags: [\"payload\"],\n    },\n  });\n};\n","import { BulkOperationResult } from \"payload/dist/collections/config/types\";\nimport { PaginatedDocs } from \"payload/dist/database/types\";\n\nimport { httpClient, HttpClientProps } from \"@/lib/httpClient\";\nimport * as op from \"@/operations\";\nimport { ByIDOptions, GeneratedTypes, ManyOptions } from \"@/types\";\n\ntype RestConfig = {\n  log?: boolean;\n} & HttpClientProps;\n\nexport const payloadRestClient = <TGeneratedTypes extends GeneratedTypes>(\n  config: RestConfig\n) => {\n  const { log, url, ...props } = config;\n  const client = httpClient({\n    url: `${url}/api`,\n    ...props,\n  });\n\n  /**\n   * @description Find documents with criteria\n   * @param options\n   * @returns documents satisfying query\n   */\n  const find = async <T extends keyof TGeneratedTypes[\"collections\"]>(\n    options: op.FindOptions<T>\n  ): Promise<PaginatedDocs<TGeneratedTypes[\"collections\"][T]>> => {\n    return op.find(client, options);\n  };\n\n  const findByID = <T extends keyof GeneratedTypes[\"collections\"]>(\n    options: op.FindByIdOptions<T>\n  ): Promise<GeneratedTypes[\"collections\"][T]> => {\n    return op.findByID(client, options);\n  };\n\n  const count = <T extends keyof GeneratedTypes[\"collections\"]>(\n    options: op.CountOptions<T>\n  ): Promise<{ totalDocs: number }> => {\n    return op.count(client, options);\n  };\n\n  const create = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n    options: op.CreateOptions<TSlug>\n  ): Promise<GeneratedTypes[\"collections\"][TSlug]> => {\n    return op.create(client, options);\n  };\n\n  const updateByID = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n    options: op.UpdateByIDOptions<TSlug>\n  ): Promise<GeneratedTypes[\"collections\"][TSlug]> => {\n    return op.updateByID(client, options);\n  };\n\n  const update = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n    options: op.UpdateOptions<TSlug>\n  ): Promise<BulkOperationResult<TSlug>> => {\n    return op.update(client, options);\n  };\n\n  const deleteMany = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n    options: ManyOptions<TSlug>\n  ): Promise<BulkOperationResult<TSlug>> => {\n    return op.deleteMany(client, options);\n  };\n\n  const deleteByID = <TSlug extends keyof GeneratedTypes[\"collections\"]>(\n    options: ByIDOptions<TSlug>\n  ): Promise<GeneratedTypes[\"collections\"][TSlug]> => {\n    return op.deleteByID(client, options);\n  };\n\n  return {\n    find: find,\n    findByID: findByID,\n    count: count,\n    create: create,\n    update: update,\n    updateByID: updateByID,\n    delete: deleteMany,\n    deleteByID: deleteByID,\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,gBAAe;;;ACAf,kBAAqB;AAErB,IAAM,MAAM,QAAQ,IAAI,YAAY;AAE7B,IAAM,eAAe,CAAC,UAA8B;AACzD,MAAI,QAAQ,cAAc;AACxB,eAAO,kBAAK,EAAE,MAAM,OAAO,KAAK,CAAC;AAAA,EACnC;AAMA,aAAO,kBAAK,EAAE,MAAM,OAAO,KAAK,CAAC;AACnC;AAEO,IAAM,SAAS,aAAa;;;ADZnC,IAAM,QACH,QAAQ,IAAI,6BAA8C;AAC7D,IAAM,aAAa,OAAO,QAAQ,IAAI,sBAAsB,KAAK;AA+C1D,SAAS,WAAW,OAAoC;AAC7D,QAAM,WAAW,CAAC,UAAkB,UAAwB;AAC1D,UAAM,cAAc,UAAAA,QAAG,UAAU,OAAO,EAAE,gBAAgB,KAAK,CAAC;AAChE,WAAO,GAAG,MAAM,GAAG,IAAI,QAAQ,GAAG,WAAW;AAAA,EAC/C;AAEA,QAAM,YAAY,OAChB,KACA,QACA,SACA,MACA,SACiB;AACjB,UAAM,cAA2B;AAAA,MAC/B;AAAA,MACA,aAAa;AAAA,MACb,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,iBAAiB;AAAA,QACjB,GAAG;AAAA,MACL;AAAA,MACA,MAAM,KAAK,UAAU,IAAI;AAAA;AAAA,MAGzB,MAAM;AAAA,QACJ;AAAA,QACA,MAAM,CAAC,SAAS;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,IACF;AAEA,QAAI;AACF,UAAI,MAAM,eAAe;AACvB,cAAM,cAAc,EAAE,KAAK,GAAG,YAAY,CAAC;AAAA,MAC7C;AAEA,YAAM,WAAW,MAAM,MAAM,KAAK,WAAW;AAC7C,UAAI,CAAC,SAAS,IAAI;AAChB,cAAM,IAAI,MAAM,SAAS,UAAU;AAAA,MACrC;AAEA,YAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,UAAI,MAAM,cAAc;AACtB,cAAM,aAAa,IAAI;AAAA,MACzB;AAEA,aAAO,MAAM,gBAAgB,MAAM,cAAc,IAAI,IAAI;AAAA,IAC3D,SAAS,OAAO;AACd,aAAO,MAAM,kBAAkB,GAAG,IAAI,KAAK;AAC3C,YAAM;AAAA,IACR;AAAA,EACF;AAEA,QAAM,UAAiC,OACrC,UACA,QACA,UAAU,CAAC,MACR;AACH,UAAM,MAAM,SAAS,UAAU,QAAQ,KAAK;AAE5C,UAAM,UAAU,QAAQ,WAAW,CAAC;AACpC,QAAI,MAAM,SAAS;AACjB,aAAO,OAAO,SAAS,MAAM,QAAQ,CAAC;AAAA,IACxC;AAEA,WAAO,UAAU,KAAK,QAAQ,SAAS,QAAQ,YAAY,QAAQ,IAAI;AAAA,EACzE;AAEA,QAAM,cAAkC,OAAO,UAAUC,WACvD,QAAQ,UAAU,QAAQA,MAAK;AACjC,QAAM,aAAgC,OAAO,UAAUA,WACrD,QAAQ,UAAU,OAAOA,MAAK;AAChC,QAAM,eAAoC,OAAO,UAAUA,WACzD,QAAQ,UAAU,SAASA,MAAK;AAElC,SAAO;AAAA,IACL;AAAA,IACA,KAAK,CAAC,UAAUA,WAAU,QAAQ,UAAU,OAAOA,MAAK;AAAA,IACxD,QAAQ,CAAC,UAAUA,WAAU,QAAQ,UAAU,UAAUA,MAAK;AAAA,IAC9D,MAAM;AAAA,IACN,KAAK;AAAA,IACL,OAAO;AAAA,EACT;AACF;;;AErHO,IAAM,OAAO,OAClB,QACA,YAC6D;AAC7D,QAAM,EAAE,YAAY,GAAG,KAAK,IAAI;AAEhC,SAAO,OAAO,IAAI,GAAG,UAAoB,IAAI;AAAA,IAC3C,OAAO;AAAA,IACP,YAAY;AAAA,MACV,MAAM,CAAC,SAAS;AAAA,IAClB;AAAA,EACF,CAAC;AACH;AAEO,IAAM,WAAW,CACtB,QACA,YAC8C;AAC9C,QAAM,EAAE,YAAY,IAAI,GAAG,KAAK,IAAI;AACpC,QAAM,MAAM,GAAG,UAAoB,IAAI,EAAE;AACzC,SAAO,OAAO,IAAI,KAAK;AAAA,IACrB,OAAO;AAAA,IACP,YAAY;AAAA,MACV,MAAM,CAAC,SAAS;AAAA,IAClB;AAAA,EACF,CAAC;AACH;;;AC9BA,IAAM,SAAS,CACb,QACA,YACwC;AACxC,QAAM,EAAE,YAAY,MAAM,GAAG,KAAK,IAAI;AACtC,SAAO,OAAO,IAAI,YAAsB;AAAA,IACtC,MAAM;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AAEA,IAAM,aAAa,CACjB,QACA,YACkD;AAClD,QAAM,EAAE,YAAY,IAAI,MAAM,GAAG,KAAK,IAAI;AAC1C,SAAO,OAAO,IAAI,GAAG,UAAoB,IAAI,EAAE,IAAI;AAAA,IACjD,MAAM;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;;;ACtBO,IAAM,SAAS,CACpB,QACA,YACkD;AAClD,QAAM,EAAE,YAAY,MAAM,GAAG,KAAK,IAAI;AACtC,SAAO,OAAO,KAAK,GAAG,UAAoB,IAAI;AAAA,IAC5C,MAAM;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;;;ACXO,IAAM,aAAa,CACxB,QACA,YACwC;AACxC,QAAM,EAAE,YAAY,GAAG,KAAK,IAAI;AAChC,SAAO,OAAO,OAAO,GAAG,UAAoB,IAAI;AAAA,IAC9C,OAAO;AAAA,EACT,CAAC;AACH;AAEO,IAAM,aAAa,CACxB,QACA,YACkD;AAClD,QAAM,EAAE,YAAY,IAAI,GAAG,KAAK,IAAI;AACpC,SAAO,OAAO,OAAO,GAAG,UAAoB,IAAI,EAAE,IAAI;AAAA,IACpD,OAAO;AAAA,EACT,CAAC;AACH;;;ACrBO,IAAM,QAAQ,CACnB,QACA,YACmC;AACnC,QAAM,EAAE,YAAY,GAAG,KAAK,IAAI;AAChC,SAAO,OAAO,IAAI,GAAG,UAAoB,UAAU;AAAA,IACjD,OAAO;AAAA,IACP,YAAY;AAAA,MACV,MAAM,CAAC,SAAS;AAAA,IAClB;AAAA,EACF,CAAC;AACH;;;ACVO,IAAM,oBAAoB,CAC/B,WACG;AACH,QAAM,EAAE,KAAK,KAAK,GAAG,MAAM,IAAI;AAC/B,QAAM,SAAS,WAAW;AAAA,IACxB,KAAK,GAAG,GAAG;AAAA,IACX,GAAG;AAAA,EACL,CAAC;AAOD,QAAMC,QAAO,OACX,YAC8D;AAC9D,WAAU,KAAK,QAAQ,OAAO;AAAA,EAChC;AAEA,QAAMC,YAAW,CACf,YAC8C;AAC9C,WAAU,SAAS,QAAQ,OAAO;AAAA,EACpC;AAEA,QAAMC,SAAQ,CACZ,YACmC;AACnC,WAAU,MAAM,QAAQ,OAAO;AAAA,EACjC;AAEA,QAAMC,UAAS,CACb,YACkD;AAClD,WAAU,OAAO,QAAQ,OAAO;AAAA,EAClC;AAEA,QAAMC,cAAa,CACjB,YACkD;AAClD,WAAU,WAAW,QAAQ,OAAO;AAAA,EACtC;AAEA,QAAMC,UAAS,CACb,YACwC;AACxC,WAAU,OAAO,QAAQ,OAAO;AAAA,EAClC;AAEA,QAAMC,cAAa,CACjB,YACwC;AACxC,WAAU,WAAW,QAAQ,OAAO;AAAA,EACtC;AAEA,QAAMC,cAAa,CACjB,YACkD;AAClD,WAAU,WAAW,QAAQ,OAAO;AAAA,EACtC;AAEA,SAAO;AAAA,IACL,MAAMP;AAAA,IACN,UAAUC;AAAA,IACV,OAAOC;AAAA,IACP,QAAQC;AAAA,IACR,QAAQE;AAAA,IACR,YAAYD;AAAA,IACZ,QAAQE;AAAA,IACR,YAAYC;AAAA,EACd;AACF;","names":["qs","props","find","findByID","count","create","updateByID","update","deleteMany","deleteByID"]}