{"version":3,"sources":["../src/index.ts","../src/client.ts"],"sourcesContent":["export * from \"./client\";\n","import { GeneratedTypes } from \"payload\";\nimport { Options as FindOptions } from \"payload/dist/collections/operations/local/find\";\nimport { PaginatedDocs } from \"payload/dist/database/types\";\nimport { HttpClient } from \"./lib/httpClient\";\n\nexport class PayloadClient<TGeneratedTypes extends GeneratedTypes> {\n  private client: HttpClient;\n\n  constructor(client: HttpClient) {\n    this.client = client;\n  }\n\n  find = async <T extends keyof TGeneratedTypes[\"collections\"]>(\n    options: FindOptions<T>\n  ): Promise<PaginatedDocs<TGeneratedTypes[\"collections\"][T]>> => {\n    const { collection, ...rest } = options;\n\n    return this.client.get(collection as string, {\n      query: rest,\n    });\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACKO,IAAM,gBAAN,MAA4D;AAAA,EACzD;AAAA,EAER,YAAY,QAAoB;AAC9B,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,OAAO,OACL,YAC8D;AAC9D,UAAM,EAAE,YAAY,GAAG,KAAK,IAAI;AAEhC,WAAO,KAAK,OAAO,IAAI,YAAsB;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;","names":[]}